// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: device.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace Device {
  public static class TemperatureService
  {
    static readonly string __ServiceName = "device.TemperatureService";

    static readonly Marshaller<global::Device.Temperature> __Marshaller_Temperature = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Device.Temperature.Parser.ParseFrom);
    static readonly Marshaller<global::Device.Empty> __Marshaller_Empty = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Device.Empty.Parser.ParseFrom);
    static readonly Marshaller<global::Device.Device> __Marshaller_Device = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Device.Device.Parser.ParseFrom);

    static readonly Method<global::Device.Temperature, global::Device.Empty> __Method_set_temperature = new Method<global::Device.Temperature, global::Device.Empty>(
        MethodType.Unary,
        __ServiceName,
        "set_temperature",
        __Marshaller_Temperature,
        __Marshaller_Empty);

    static readonly Method<global::Device.Device, global::Device.Temperature> __Method_get_temperature = new Method<global::Device.Device, global::Device.Temperature>(
        MethodType.ServerStreaming,
        __ServiceName,
        "get_temperature",
        __Marshaller_Device,
        __Marshaller_Temperature);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Device.DeviceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of TemperatureService</summary>
    public abstract class TemperatureServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Device.Empty> set_temperature(global::Device.Temperature request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task get_temperature(global::Device.Device request, IServerStreamWriter<global::Device.Temperature> responseStream, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for TemperatureService</summary>
    public class TemperatureServiceClient : ClientBase<TemperatureServiceClient>
    {
      /// <summary>Creates a new client for TemperatureService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public TemperatureServiceClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for TemperatureService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public TemperatureServiceClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected TemperatureServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected TemperatureServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Device.Empty set_temperature(global::Device.Temperature request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return set_temperature(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Device.Empty set_temperature(global::Device.Temperature request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_set_temperature, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Device.Empty> set_temperatureAsync(global::Device.Temperature request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return set_temperatureAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Device.Empty> set_temperatureAsync(global::Device.Temperature request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_set_temperature, null, options, request);
      }
      public virtual AsyncServerStreamingCall<global::Device.Temperature> get_temperature(global::Device.Device request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return get_temperature(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncServerStreamingCall<global::Device.Temperature> get_temperature(global::Device.Device request, CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_get_temperature, null, options, request);
      }
      protected override TemperatureServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new TemperatureServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(TemperatureServiceBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_set_temperature, serviceImpl.set_temperature)
          .AddMethod(__Method_get_temperature, serviceImpl.get_temperature).Build();
    }

  }
  public static class UsageService
  {
    static readonly string __ServiceName = "device.UsageService";

    static readonly Marshaller<global::Device.ElectricityUsage> __Marshaller_ElectricityUsage = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Device.ElectricityUsage.Parser.ParseFrom);
    static readonly Marshaller<global::Device.Empty> __Marshaller_Empty = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Device.Empty.Parser.ParseFrom);
    static readonly Marshaller<global::Device.GasUsage> __Marshaller_GasUsage = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Device.GasUsage.Parser.ParseFrom);

    static readonly Method<global::Device.ElectricityUsage, global::Device.Empty> __Method_latest_electricity_usage = new Method<global::Device.ElectricityUsage, global::Device.Empty>(
        MethodType.Unary,
        __ServiceName,
        "latest_electricity_usage",
        __Marshaller_ElectricityUsage,
        __Marshaller_Empty);

    static readonly Method<global::Device.GasUsage, global::Device.Empty> __Method_latest_gas_usage = new Method<global::Device.GasUsage, global::Device.Empty>(
        MethodType.Unary,
        __ServiceName,
        "latest_gas_usage",
        __Marshaller_GasUsage,
        __Marshaller_Empty);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Device.DeviceReflection.Descriptor.Services[1]; }
    }

    /// <summary>Base class for server-side implementations of UsageService</summary>
    public abstract class UsageServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Device.Empty> latest_electricity_usage(global::Device.ElectricityUsage request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Device.Empty> latest_gas_usage(global::Device.GasUsage request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for UsageService</summary>
    public class UsageServiceClient : ClientBase<UsageServiceClient>
    {
      /// <summary>Creates a new client for UsageService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public UsageServiceClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for UsageService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public UsageServiceClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected UsageServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected UsageServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Device.Empty latest_electricity_usage(global::Device.ElectricityUsage request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return latest_electricity_usage(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Device.Empty latest_electricity_usage(global::Device.ElectricityUsage request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_latest_electricity_usage, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Device.Empty> latest_electricity_usageAsync(global::Device.ElectricityUsage request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return latest_electricity_usageAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Device.Empty> latest_electricity_usageAsync(global::Device.ElectricityUsage request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_latest_electricity_usage, null, options, request);
      }
      public virtual global::Device.Empty latest_gas_usage(global::Device.GasUsage request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return latest_gas_usage(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Device.Empty latest_gas_usage(global::Device.GasUsage request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_latest_gas_usage, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Device.Empty> latest_gas_usageAsync(global::Device.GasUsage request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return latest_gas_usageAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Device.Empty> latest_gas_usageAsync(global::Device.GasUsage request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_latest_gas_usage, null, options, request);
      }
      protected override UsageServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new UsageServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(UsageServiceBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_latest_electricity_usage, serviceImpl.latest_electricity_usage)
          .AddMethod(__Method_latest_gas_usage, serviceImpl.latest_gas_usage).Build();
    }

  }
}
#endregion
