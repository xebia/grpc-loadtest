// Code generated by protoc-gen-go.
// source: device.proto
// DO NOT EDIT!

/*
Package device is a generated protocol buffer package.

It is generated from these files:
	device.proto

It has these top-level messages:
	Empty
	Temperature
	ElectricityUsage
	GasUsage
*/
package device

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Temperature struct {
	Celcius float32 `protobuf:"fixed32,1,opt,name=celcius" json:"celcius,omitempty"`
}

func (m *Temperature) Reset()                    { *m = Temperature{} }
func (m *Temperature) String() string            { return proto.CompactTextString(m) }
func (*Temperature) ProtoMessage()               {}
func (*Temperature) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type ElectricityUsage struct {
	Kw int64 `protobuf:"varint,1,opt,name=kw" json:"kw,omitempty"`
}

func (m *ElectricityUsage) Reset()                    { *m = ElectricityUsage{} }
func (m *ElectricityUsage) String() string            { return proto.CompactTextString(m) }
func (*ElectricityUsage) ProtoMessage()               {}
func (*ElectricityUsage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type GasUsage struct {
	M3 int64 `protobuf:"varint,1,opt,name=m3" json:"m3,omitempty"`
}

func (m *GasUsage) Reset()                    { *m = GasUsage{} }
func (m *GasUsage) String() string            { return proto.CompactTextString(m) }
func (*GasUsage) ProtoMessage()               {}
func (*GasUsage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*Empty)(nil), "device.Empty")
	proto.RegisterType((*Temperature)(nil), "device.Temperature")
	proto.RegisterType((*ElectricityUsage)(nil), "device.ElectricityUsage")
	proto.RegisterType((*GasUsage)(nil), "device.GasUsage")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for TemperatureService service

type TemperatureServiceClient interface {
	SetTemperature(ctx context.Context, in *Temperature, opts ...grpc.CallOption) (*Empty, error)
	GetTemperature(ctx context.Context, in *Empty, opts ...grpc.CallOption) (TemperatureService_GetTemperatureClient, error)
}

type temperatureServiceClient struct {
	cc *grpc.ClientConn
}

func NewTemperatureServiceClient(cc *grpc.ClientConn) TemperatureServiceClient {
	return &temperatureServiceClient{cc}
}

func (c *temperatureServiceClient) SetTemperature(ctx context.Context, in *Temperature, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/device.TemperatureService/set_temperature", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *temperatureServiceClient) GetTemperature(ctx context.Context, in *Empty, opts ...grpc.CallOption) (TemperatureService_GetTemperatureClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_TemperatureService_serviceDesc.Streams[0], c.cc, "/device.TemperatureService/get_temperature", opts...)
	if err != nil {
		return nil, err
	}
	x := &temperatureServiceGetTemperatureClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TemperatureService_GetTemperatureClient interface {
	Recv() (*Temperature, error)
	grpc.ClientStream
}

type temperatureServiceGetTemperatureClient struct {
	grpc.ClientStream
}

func (x *temperatureServiceGetTemperatureClient) Recv() (*Temperature, error) {
	m := new(Temperature)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for TemperatureService service

type TemperatureServiceServer interface {
	SetTemperature(context.Context, *Temperature) (*Empty, error)
	GetTemperature(*Empty, TemperatureService_GetTemperatureServer) error
}

func RegisterTemperatureServiceServer(s *grpc.Server, srv TemperatureServiceServer) {
	s.RegisterService(&_TemperatureService_serviceDesc, srv)
}

func _TemperatureService_SetTemperature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Temperature)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemperatureServiceServer).SetTemperature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.TemperatureService/SetTemperature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemperatureServiceServer).SetTemperature(ctx, req.(*Temperature))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemperatureService_GetTemperature_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TemperatureServiceServer).GetTemperature(m, &temperatureServiceGetTemperatureServer{stream})
}

type TemperatureService_GetTemperatureServer interface {
	Send(*Temperature) error
	grpc.ServerStream
}

type temperatureServiceGetTemperatureServer struct {
	grpc.ServerStream
}

func (x *temperatureServiceGetTemperatureServer) Send(m *Temperature) error {
	return x.ServerStream.SendMsg(m)
}

var _TemperatureService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "device.TemperatureService",
	HandlerType: (*TemperatureServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "set_temperature",
			Handler:    _TemperatureService_SetTemperature_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "get_temperature",
			Handler:       _TemperatureService_GetTemperature_Handler,
			ServerStreams: true,
		},
	},
	Metadata: fileDescriptor0,
}

// Client API for UsageService service

type UsageServiceClient interface {
	LatestElectricityUsage(ctx context.Context, in *ElectricityUsage, opts ...grpc.CallOption) (*Empty, error)
	LatestGasUsage(ctx context.Context, in *GasUsage, opts ...grpc.CallOption) (*Empty, error)
}

type usageServiceClient struct {
	cc *grpc.ClientConn
}

func NewUsageServiceClient(cc *grpc.ClientConn) UsageServiceClient {
	return &usageServiceClient{cc}
}

func (c *usageServiceClient) LatestElectricityUsage(ctx context.Context, in *ElectricityUsage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/device.UsageService/latest_electricity_usage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usageServiceClient) LatestGasUsage(ctx context.Context, in *GasUsage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/device.UsageService/latest_gas_usage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UsageService service

type UsageServiceServer interface {
	LatestElectricityUsage(context.Context, *ElectricityUsage) (*Empty, error)
	LatestGasUsage(context.Context, *GasUsage) (*Empty, error)
}

func RegisterUsageServiceServer(s *grpc.Server, srv UsageServiceServer) {
	s.RegisterService(&_UsageService_serviceDesc, srv)
}

func _UsageService_LatestElectricityUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ElectricityUsage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsageServiceServer).LatestElectricityUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.UsageService/LatestElectricityUsage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsageServiceServer).LatestElectricityUsage(ctx, req.(*ElectricityUsage))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsageService_LatestGasUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GasUsage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsageServiceServer).LatestGasUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.UsageService/LatestGasUsage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsageServiceServer).LatestGasUsage(ctx, req.(*GasUsage))
	}
	return interceptor(ctx, in, info, handler)
}

var _UsageService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "device.UsageService",
	HandlerType: (*UsageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "latest_electricity_usage",
			Handler:    _UsageService_LatestElectricityUsage_Handler,
		},
		{
			MethodName: "latest_gas_usage",
			Handler:    _UsageService_LatestGasUsage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("device.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 262 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x91, 0x31, 0x4f, 0xc3, 0x30,
	0x10, 0x85, 0xeb, 0x54, 0x34, 0xe8, 0x28, 0x24, 0x32, 0x4b, 0x94, 0x09, 0x79, 0x81, 0x29, 0x42,
	0x8d, 0x10, 0x62, 0x45, 0x8a, 0x60, 0x6e, 0x41, 0x8c, 0x91, 0x31, 0xa7, 0x28, 0x6a, 0xa2, 0x46,
	0xf6, 0x85, 0xd2, 0x7f, 0xc0, 0xc0, 0xaf, 0xe0, 0x97, 0x22, 0xdc, 0xb8, 0x84, 0xa6, 0xe3, 0xf9,
	0xde, 0x7b, 0xfe, 0x9e, 0x0d, 0xd3, 0x37, 0x7c, 0x2f, 0x15, 0x26, 0x8d, 0x5e, 0xd1, 0x8a, 0x4f,
	0xb6, 0x93, 0xf0, 0xe1, 0x28, 0xab, 0x1b, 0xda, 0x88, 0x4b, 0x38, 0x79, 0xc2, 0xba, 0x41, 0x2d,
	0xa9, 0xd5, 0xc8, 0x23, 0xf0, 0x15, 0x56, 0xaa, 0x6c, 0x4d, 0xc4, 0x2e, 0xd8, 0x95, 0x37, 0x77,
	0xa3, 0x10, 0x10, 0x66, 0x15, 0x2a, 0xd2, 0xa5, 0x2a, 0x69, 0xf3, 0x6c, 0x64, 0x81, 0xfc, 0x0c,
	0xbc, 0xe5, 0xda, 0x0a, 0xc7, 0x73, 0x6f, 0xb9, 0x16, 0x31, 0x1c, 0x3f, 0x48, 0xb3, 0xdb, 0xd5,
	0xa9, 0xdb, 0xd5, 0xe9, 0xec, 0x93, 0x01, 0xef, 0xdd, 0xb4, 0x40, 0xfd, 0x0b, 0xc2, 0x6f, 0x21,
	0x30, 0x48, 0x39, 0xf5, 0x18, 0xce, 0x93, 0x0e, 0xb9, 0x27, 0x8f, 0x4f, 0xdd, 0xe1, 0x16, 0x7b,
	0xc4, 0xef, 0x20, 0x28, 0xf6, 0x8c, 0xff, 0x35, 0xf1, 0xa1, 0x1c, 0x31, 0xba, 0x66, 0xb3, 0x2f,
	0x06, 0x53, 0x0b, 0xe9, 0x20, 0x32, 0x88, 0x2a, 0x49, 0x68, 0x28, 0xc7, 0xbf, 0x8a, 0x79, 0x6b,
	0x7b, 0x44, 0xbb, 0xd0, 0xbd, 0xf6, 0x43, 0xa4, 0x1b, 0x08, 0xbb, 0x98, 0x42, 0x9a, 0xce, 0x1e,
	0x3a, 0x91, 0x7b, 0x98, 0x81, 0xed, 0x3e, 0x00, 0x1f, 0x3f, 0x92, 0x42, 0x37, 0xea, 0xdb, 0x1b,
	0x3f, 0x2e, 0x5e, 0x5e, 0x27, 0xf6, 0xaf, 0xd2, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf7, 0x03,
	0x01, 0x55, 0xbb, 0x01, 0x00, 0x00,
}
